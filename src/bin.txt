import React from 'react';

const API = 'https://api.github.com/users/';

class App extends React.Component {
  
  constructor(props) {
    super(props);
    this.state = {
      profileInfo:{},
      url:''
    };
    this.findUser = this.findUser.bind(this);
  }

  findUser(e) {
      e.preventDefault();
      var url = this.refs.username.value;
      this.fetchProfile(API+""+url);
  }

  fetchProfile(url){
    fetch(url)  
    .then( (response) => {
                    return response.json() })   
                        .then( (json) => {
                            this.setState({url:url});
                            return this.setState({profileInfo: json});
                        }).catch((error) => {
         console.error(error);
     });;
  }
  
 componentWillMount(){
  
  }

  
  render() {
      let listItems = '';
      if(this.state.url){
            listItems = <ListItem  url={this.state.url}/>
        } else {
            listItems = null;
        }
    return (
        
    <div>
        <form>
        <div><input type='text' ref='username' placeholder='type user name'/><button onClick={this.findUser}>Search</button></div>
        </form>
        <div>
          <div className='ProfileItem'><img className="profile" src={this.state.profileInfo.avatar_url} alt='myPic'/></div>
          <div className='ProfileItem'><h1>{this.state.profileInfo.name}</h1></div>
          <div className="clear-fl"></div>
        </div>
        <div className="Table">
        {listItems}
        
          
        
      </div>
   </div>
    );
  }
}

class ListItem extends React.Component {
  
  constructor(props) {
    super(props);
    
    this.state = {
      repo:[],
      url:''
    };
  }
  
  componentWillMount() {
    //this.loadData();
  }

  componentWillUpdate(){
     if(this.props.url !== this.state.url){
          this.setState({url:this.props.url});
        this.loadData();
     }

  }
  
  loadData() {
      
    fetch(this.props.url+"/repos")  
  .then( (response) => {
    
                return response.json() })   
                    .then( (json) => {
    
                        this.setState({repo: json}); 
                        
                      //console.log(this.state.repo);
                      return this.state.repo;
       
   
   }
    
                    )};
  
  


  
  render(){
    
    let items;
    if(this.state.repo.length > 0){
        console.log('>>',this.state.repo); 
        items = <h1>Data available</h1> 
    } else {
        items = <h1>No data</h1> 
    }

    
    return(
        <div>
        
        <NumberList numbers={this.state.repo} />
        </div>
      
        
    )
  }
}

function NumberList(props) {
  const numbers = props.numbers;
  const listItems = numbers.map((number,index) =>
    
   
<div className="Row" key = {number.id}>
        <div className="Cell">
                <p>{index+1}</p>
            </div>
            <div className="Cell">
<p>{number.name}</p>
            </div>
            <div className="Cell">
                <p>{number.subscription_url}</p>
            </div>
        </div>
    
    
  );
  return (
      <div>
      
        
        <div>{listItems}</div>
    
      </div>
    
  );
}

/* function ListItem(item){
  

      return (
        
      )
    
  } */

//ReactDOM.render(<App/>, document.getElementById('app'));


export default App;
/* <div className="Row">
        <div className="Cell">
            <p>Row 2 Column 1</p>
        </div>
        <div className="Cell">
            <p>Row 2 Column 2</p>
        </div>
        <div className="Cell">
            <p>Row 2 Column 3</p>
        </div>
    </div> */

//const Application = () =><h1>Hello Welcome to InRhythem Training Program With Mayank Patel</h1>;

/*class Application extends React.Component {

    constructor(props) {
        super(props);
        console.log(props);
        this.state = {
            location : 'Pune'
        }
        this.update = this.update.bind(this);
    }

    update(e){
        this.setState({location:e.target.value})
    }

    render() {
        //return (React.createElement('h1',null,'Hello Boss'))
        let legalText = this.props.legal;
        let year = this.props.year;
        let location = this.props.location;

        return (
            <div>
                <h1>Hello JSX Statement</h1>
                <p>Demo of First React Component</p>
                <p>{legalText} <i>{year}</i></p>
                <span>New Location<b>{location}</b> Old Location{this.state.location}</span>
                <p>{this.props.project} </p>
                
                <Widget update={this.update}/>
            </div>
        );

        // if we try to access this.props it will throw error
    }
}

Application.PropTypes = {
    legal: React.PropTypes.string,
    year: React.PropTypes.number.isRequired,
    location: React.PropTypes.string.isRequired,
    project: React.PropTypes.string
}

Application.defaultProps = {
    project: 'No Project Allocation Done Yet so default'
}

const Widget = props => <input type='text' onChange={props.update}/>
export default Application;*/

// props, PropTypes, React.Component, JSX, React.creareElement, defaultProps, export, render, import, state, setState

// React.creatClass

// functional and class Component
// best practices
// life cycle
// handle events
// conditional Statement
// show and hide
// deal with form
// ul and li
// form field
// detect chnages 
// refrence of 

// https://toddmotto.com/react-create-class-versus-component/
// https://facebook.github.io/react/docs/react-api.html 

// https://developer.github.com/v3/users/
// https://api.github.com/users/mayank-patel
// https://api.github.com/users/mayank-patel/repos

//https://pages.github.com/
//Use webpack for the build

	
//Mayank Patel	9:11 AM
//https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
	
//me	9:14 AM
//i can't hear your voice
	
//Mayank Patel	9:20 AM
//I can not hear you
//https://developer.github.com/v3/users/
//https://api.github.com/users/mayank-patel
//https://api.github.com/users/mayank-patel/repos
	
//me	9:23 AM
//no voice
	
//Mayank Patel	9:23 AM
//I can hear you
//https://pages.github.com/
//Use webpack for the build



